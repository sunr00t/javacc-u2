/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(est)package est;

public class est{  public static void main(String args []) throws ParseException  {    est parser = new est(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (est.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        est.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(est)SKIP :{  " "| "\r"| "\t"| "\n"}

/* GERAÇÃO DA GRAMATICA = (VN, VT, P, S)
   VN = mneumonicos
   VT = Simbolos Terminais
   P = Regra de Produção
   S = Inicio <program>  */  



TOKEN: /* PALAVRAS RESERVADAS */
{
  < PROGRAM: "program" >
| < IS: "is" >
| < CODE: "code" >
| < ENDCODE: "endcode" >
| < IF: "if" >
| < ENDIF: "endif" >
| < ELSE: "else" >
| < THEN: "then" >
| < BEGIN: "begin" >
| < END: "end" >

}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
