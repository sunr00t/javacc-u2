options
{
  STATIC = false;
}

PARSER_BEGIN(Parser)
package javacc;

public class Parser
{
  public static void main(String [] args) throws ParseException, 
  TokenMgrError
  {
    Parser parser;
    if (args.length == 0)
    {
      System.out.println("Parser: Reading from standard input... ");
      parser = new Parser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Parser: Reading from file " + args [0] + "...");
      try
      {
        parser = new Parser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Parser: File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Parser: Usage is one of:");
      System.out.println(" java Parser < inputfile");
      System.out.println("OR");
      System.out.println(" java Scanner inputfile");
      return;
    }
    try
    {
      parser.Start();
      System.out.println("Parser: Program parsed successfully.");
    }
    catch (ParseException e)
    {
      System.out.println("Parser: Encountered errors on parsing.");
      e.printStackTrace();
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\n"
| "\r"
| "\r\n"

}

//TIPOS DE DADOS

TOKEN : { < IDENTIFICADOR : < LETRA > (< LETRA > | < DIGITO >)* > }
TOKEN : { < STRING : < ASPAS >(< PONTO >)*< ASPAS > > }
TOKEN : { < INTEIRO : (< DIGITO >)+ > } 
TOKEN : { < REAL : <INTEIRO >(< PONTO > < INTEIRO >)? > }
TOKEN : { < TIPODEDADOS: < TSTRING > | < TINTEIRO > | < TREAL > >  }

//PALAVRAS RESERVADAS

TOKEN : { < TSTRING : "string" > }
TOKEN : { < TINTEIRO : "integer" > }
TOKEN : { < TREAL : "real" > }
TOKEN : { < ARRAY : "array" > }
TOKEN : { < RECORD : "record" > }
TOKEN : { < IS : "is" > }
TOKEN : { < ENDRECORD : "endrecord" >}
TOKEN : { < OF : "of" > }
TOKEN : { < OFRECORD : "of record" > }

// CARACTERES
TOKEN : { < #LETRA : ["a"-"z","A"-"Z"] > }
TOKEN : { < #DIGITO : ["0"-"9"] > }

// SIMBOLOS
TOKEN : { < DOISPONTOS : ":" > }
TOKEN : { < PONTOVIRGULA : ";" > }
TOKEN : { < INTERVALO : ".." > }
TOKEN : { < VIRGULA : "," > }
TOKEN : { < PARENTESQ : "(" > }
TOKEN : { < PARENTEDIR : ")" > }
TOKEN : { < ASPAS : "\"" > }
TOKEN : { < PONTO : "." > }


void Start() :
{}
{
  Declaracoes()
  < EOF >
}

void Declaracoes() :
{}
{
 Record()
}

void Record() :
{}
{
(< RECORD > < IDENTIFICADOR > <IS > ArgumentoDoRecord() < ENDRECORD > <PONTOVIRGULA >)*

}

void ArgumentoDoRecord() :
{}
{
  < IDENTIFICADOR > <DOISPONTOS > < TIPODEDADOS >
}
